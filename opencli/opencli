#!/bin/bash

################################################################################
# Script Name: /usr/local/bin/opencli
# Description: Makes all OpenCLI commands available on the terminal.
# Usage: opencli <COMMAND-NAME> <ATTRIBUTES>
# Author: Stefan Pejcic
# Created: 15.11.2023
# Last Modified: 08.07.2025
# Company: openpanel.com
# Copyright (c) openpanel.com
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
################################################################################

set -euo pipefail

# Constants
readonly OPENCLI_VERSION="202.507.014"
readonly LOG_FILE="/var/log/openpanel/admin/opencli.log"
readonly SCRIPT_DIR="/usr/local/opencli"
readonly HOOKS_DIR="/etc/openpanel/openpanel/hooks"

# Special command mappings
declare -A SPECIAL_COMMANDS=(
    ["blacklist"]="/usr/ipset-blacklist.sh"
)

# Functions
show_about() {
    cat <<EOF
About:
  Documentation:                    https://dev.openpanel.com/cli/
  Version:                          ${OPENCLI_VERSION}
  Author:                           Stefan Pejcic <stefan@pejcic.rs>
  License:                          MIT

EOF
}

show_history() {
    if [[ ! -f "$LOG_FILE" ]]; then
        echo "Warning: log file $LOG_FILE not found."
        return
    fi
    
    echo "Recently used commands:"
    tail -n 100 "$LOG_FILE" | grep -o 'opencli [^ ]*' | sort | uniq | tail -n 5 | sed 's/^/  /'
    echo ""
    
    echo "Most commonly used commands:"
    awk -F ' \\| ' '!($2 ~ /^[0-9]+$/) {print "  " $2}' "$LOG_FILE" | sort | uniq | head -n 5
    echo ""
}

show_usage() {
    cat <<EOF

Usage: opencli <COMMAND> [additional_arguments]

Suggested commands:
  opencli faq                       Display frequently asked questions and answers.
  opencli commands                  List all available OpenCLI commands and their usage.

EOF
}

check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo "OpenCLI scripts must be run as root user." >&2
        exit 1
    fi
}

log_command() {
    local command="$1"
    {
        echo "$(date +"%Y-%m-%d %H:%M:%S") | opencli $command" >> "$LOG_FILE"
    } 2>/dev/null
}

run_hook() {
    local hook_type="$1"
    local command="$2"
    shift 2
    local args=("$@")
    
    local hook_file_base="${HOOKS_DIR}/${hook_type}_${command}"
    local hook_file=""
    
    if [[ -f "${hook_file_base}" ]]; then
        hook_file="${hook_file_base}"
    elif [[ -f "${hook_file_base}.sh" ]]; then
        hook_file="${hook_file_base}.sh"
    else
        # Neither file exists
        return 0
    fi
    
    local hook_args=()
    if [[ ${#args[@]} -gt 0 ]]; then
        hook_args=("${args[@]}")
    fi
    
    case "$hook_type" in
        "pre")
            # Run pre-hook synchronously
            bash ${debug_flag:+"$debug_flag"} "$hook_file" "${hook_args[@]}" </dev/null >nohup.out 2>nohup.err
            ;;
        "post")
            # Run post-hook asynchronously
            nohup bash "$hook_file" "${hook_args[@]}" </dev/null >nohup.out 2>nohup.err &
            ;;
    esac
}

handle_special_command() {
    local command="$1"
    shift
    local args=("$@")
    
    case "$command" in
        "error")
            local error_script="/usr/local/opencli/error.py"
            if [[ ${#args[@]} -gt 0 ]]; then
                python3 "$error_script" "${args[@]}"
            else
                python3 "$error_script"
            fi
            exit 0
            ;;
        "locale")
            local locale_url="https://raw.githubusercontent.com/stefanpejcic/openpanel-translations/main/install.sh"
            if [[ ${#args[@]} -gt 0 ]]; then
                bash ${debug_flag:+"$debug_flag"} <(curl -sSL "$locale_url") "${args[@]}"
            else
                bash ${debug_flag:+"$debug_flag"} <(curl -sSL "$locale_url")
            fi
            exit 0
            ;;
    esac
}

get_binary_path() {
    local command="$1"
    
    # Check for special command mappings
    if [[ -n "${SPECIAL_COMMANDS[$command]:-}" ]]; then
        echo "${SPECIAL_COMMANDS[$command]}"
        return
    fi
    
    # Replace '-' with '/' in the command name and add .sh extension
    local binary_command="${command//-//}"
    echo "${SCRIPT_DIR}/${binary_command}.sh"
}

execute_command() {
    local command="$1"
    shift
    local args=("$@")
    
    local binary_path
    binary_path=$(get_binary_path "$command")
    
    if [[ ! -f "$binary_path" ]]; then
        echo "Error: Command '$command' not found." >&2
        show_usage
        show_history
        show_about
        exit 1
    fi
    
    log_command "$command"
    
    # Run pre-hook
    run_hook "pre" "$command" "${args[@]}"
    
    # Execute main command
    if [[ ${#args[@]} -gt 0 ]]; then
        bash ${debug_flag:+"$debug_flag"} "$binary_path" "${args[@]}"
    else
        bash ${debug_flag:+"$debug_flag"} "$binary_path"
    fi
    
    # Run post-hook
    run_hook "post" "$command" "${args[@]}"

    # purge cache for UI
    docker --context=default exec openpanel_redis bash -c "redis-cli --raw KEYS 'flask_cache_dashboard:*:html' | xargs -r redis-cli DEL" > /dev/null 2>&1 &
    #docker --context=default exec openpanel_redis bash -c "redis-cli --raw KEYS 'flask_cache_dashboard:*:json' | xargs -r redis-cli DEL" > /dev/null 2>&1 &

}

main() {
    check_root
    
    # Check if sufficient arguments provided
    if [[ $# -lt 1 ]]; then
        show_usage
        show_history
        show_about
        exit 1
    fi
    
    # Parse debug flag
    local debug_flag=""
    if [[ "$1" == "-x" ]]; then
        debug_flag="-x"
        shift
    fi
    
    # Get command name
    local command="$1"
    shift
    
    # Handle version alias
    if [[ "$command" == "-v" ]]; then
        command="--version"
    fi
    
    # Handle special commands
    handle_special_command "$command" "$@"
    
    # Execute regular command
    execute_command "$command" "$@"
}

# Script entry point
main "$@"
