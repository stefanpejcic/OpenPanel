# HTTP block (port 80) - Handles HTTP traffic
http://<DOMAIN_NAME>, http://*.<DOMAIN_NAME> {
  # logging for HTTP
  log {
    output file /var/log/caddy/domlogs/<DOMAIN_NAME>/access.log {
        roll_size 100MiB
        roll_keep 5
        roll_keep_for 720h
    }
    format json
  }

  route {

    # redirects
    import /etc/openpanel/caddy/redirects.conf

    # modsecurity
    coraza_waf {
        load_owasp_crs
        directives `
            Include /etc/openpanel/caddy/coraza_rules.conf
            Include /etc/openpanel/caddy/coreruleset/crs-setup.conf.example
            Include /etc/openpanel/caddy/coreruleset/rules/*.conf
            SecRuleEngine Off
            SecAuditEngine RelevantOnly
            SecRuleRemoveById 007
            SecRuleRemoveByTag example
            SecAuditLog /var/log/caddy/coraza_waf/<DOMAIN_NAME>.log
            SecAuditLogParts ABIJDEFHKZ
            SecAuditLogFormat json
        `
    }

    # Handle HTTP traffic (port 80)
    reverse_proxy http://127.0.0.1:<NON_SSL_PORT> {
      header_up Host {host}
    }
  }
}










# HTTPS block (port 443) - Handles HTTPS traffic
https://<DOMAIN_NAME>, https://*.<DOMAIN_NAME> {
  # logging for HTTPS
  log {
    output file /var/log/caddy/domlogs/<DOMAIN_NAME>/access.log {
        roll_size 100MiB
        roll_keep 5
        roll_keep_for 720h
    }
    format json
  }

  route {

    # redirects
    import /etc/openpanel/caddy/redirects.conf

    # modsecurity
    coraza_waf {
        load_owasp_crs
        directives `
            Include /etc/openpanel/caddy/coraza_rules.conf
            Include /etc/openpanel/caddy/coreruleset/crs-setup.conf.example
            Include /etc/openpanel/caddy/coreruleset/rules/*.conf
            SecRuleEngine Off
            SecAuditEngine RelevantOnly
            SecRuleRemoveById 007
            SecRuleRemoveByTag example
            SecAuditLog /var/log/caddy/coraza_waf/<DOMAIN_NAME>.log
            SecAuditLogParts ABIJDEFHKZ
            SecAuditLogFormat json
        `
    }

    # Handle HTTPS traffic (port 443)
    reverse_proxy https://127.0.0.1:<SSL_PORT> {
      transport http {
        tls_insecure_skip_verify
      }
      header_up Host {host}
    }

#    # Terminate TLS and pass to Varnish
#    reverse_proxy http://127.0.0.1:<NON_SSL_PORT> {
#      header_up Host {host}
#    }

  }

  # SSL (only when SSL certificate is requested)
  tls {
    on_demand
  }
}
